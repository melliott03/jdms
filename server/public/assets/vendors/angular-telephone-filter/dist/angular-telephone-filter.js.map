{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8022d1570938dc30ce0f","webpack:///./src/index.js","webpack:///./src/telephone.filter.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;ACpCA,QAAO,CAAC,MAAM,CAAC,oBAAoB,EAAE,EAAE,CAAC,CACnC,MAAM,CAAC,aAAa,aAHhB,eAAe,CAGmB,C;;;;;;;;;;;SCH3B,eAAe,GAAf,eAAe;AAAxB,UAAS,eAAe,GAAG;;AAG9B,YAAO,MAAM;;;;;;;;;AAYb,cAAS,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE;AACzB,aAAM,SAAS,GAAG,EAAE,CAAC;AACrB,aAAM,cAAc,GAAG,CAAC,CAAC;AACzB,aAAM,YAAY,GAAG,CAAC,CAAC;AACvB,aAAI,gBAAgB;;;AAGpB,aAAI,CAAC,GAAG,EAAE;AACN,oBAAO,EAAE,CAAC;UACb;;;AAGD,aAAI,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;;AAGpD,aAAI,KAAK,CAAC,MAAM,GAAG,SAAS,EAAE;;;AAG1B,iBAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;;AAEzB,iCAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;;;AAGlC,sBAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;cAC7C,MAAM;AACH,sBAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;cACzC;UAEJ;;;AAGD,aAAI,CAAC,MAAM,EAAE;AACT,oBAAO,4DAA4D,CAAC;UACvE;;;;AAKD,aAAI,MAAM,KAAK,OAAO,EAAE;AACpB,oBAAO,KAAK,CAAC;UAChB;;;;AAKD,aAAI,MAAM,KAAK,QAAQ,EAAE;;AAErB,iBAAI,IAAI,aAAC;AACT,iBAAI,MAAM,aAAC;;AAEX,qBAAQ,KAAK,CAAC,MAAM;AACpB,sBAAK,CAAC,CAAC;AACP,sBAAK,CAAC,CAAC;AACP,sBAAK,CAAC;AACF,yBAAI,GAAG,KAAK,CAAC;AACb,2BAAM;;AAEV;AACI,yBAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;AACtC,2BAAM,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AAAA,cACxC;;AAED,iBAAI,MAAM,EAAE;;AAER,qBAAI,MAAM,CAAC,MAAM,GAAG,cAAc,EAAE;;AAEhC,2BAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,GAAG,GAAG,GAC1C,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;kBAElD,MAAM;;AAEH,2BAAM,GAAG,MAAM,CAAC;kBAEnB;;AAED,wBAAO,CAAC,gBAAgB,GAAG,gBAAgB,GAAG,GAAG,GAAG,EAAE,IAClD,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAI,EAAE,CAAC;cAE3C,MAAM;;AAEH,wBAAO,GAAG,GAAG,IAAI,CAAC;cAErB;UAEJ;MAEJ","file":"angular-telephone-filter.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-telephone-filter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-telephone-filter\"] = factory();\n\telse\n\t\troot[\"angular-telephone-filter\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8022d1570938dc30ce0f\n **/","import { TelephoneFilter } from './telephone.filter';\n\nangular.module('bc.TelephoneFilter', [])\n    .filter('bcTelephone', TelephoneFilter)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","export function TelephoneFilter() {\n\n\n    return filter;\n\n\n\n\n    /**\n     * Clean or format a telephone number\n     *\n     * @param {String} number\n     * @param {String} method\n     * @return {String} finalNumber\n     */\n    function filter(tel, method) {\n        const maxLength = 10;\n        const cityCodeLength = 3;\n        const numberLength = 7;\n        let longDistanceCode;\n\n        // Return if no number was passed in\n        if (!tel) {\n            return '';\n        }\n\n        // Strip all non-numeric characters\n        let value = tel.toString().trim().replace(/\\D/g, '');\n\n        // Trim to verify the model doesn't get any larger\n        if (value.length > maxLength) {\n\n            // If the first character is a US country code\n            if (value.charAt(0) === '1') {\n                // Save the code\n                longDistanceCode = value.charAt(0);\n\n                // Don't strip it, allow 11 digits\n                value = value.substring(1, maxLength + 1);\n            } else {\n                value = value.substring(0, maxLength);\n            }\n\n        }\n\n        // Return if no method was passed in\n        if (!method) {\n            return 'A method{string} is required. e.g. \\'clean\\' or \\'format\\'';\n        }\n\n\n        //\n        // Clean a phone number\n        if (method === 'clean') {\n            return value;\n        }\n\n\n        //\n        // Format a phone number\n        if (method === 'format') {\n\n            let city;\n            let number;\n\n            switch (value.length) {\n            case 1:\n            case 2:\n            case 3:\n                city = value;\n                break;\n\n            default:\n                city = value.slice(0, cityCodeLength);\n                number = value.slice(cityCodeLength);\n            }\n\n            if (number) {\n\n                if (number.length > cityCodeLength) {\n\n                    number = number.slice(0, cityCodeLength) + '-' +\n                        number.slice(cityCodeLength, numberLength);\n\n                } else {\n\n                    number = number;\n\n                }\n\n                return (longDistanceCode ? longDistanceCode + ' ' : '') +\n                    ('(' + city + ') ' + number).trim();\n\n            } else {\n\n                return '(' + city;\n\n            }\n\n        }\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/telephone.filter.js\n **/"],"sourceRoot":""}